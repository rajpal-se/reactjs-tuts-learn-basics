import React, { Component } from 'react';
import Person from './Person/Person';
import ErrorBoundary from './ErrorBoundary/ErrorBoundary';

class App extends Component{
  state = {
    persons: [
      {id: "id_1", name: "Max", age: 24},
      {id: "id_2", name: "John", age: 19},
      {id: "id_3", name: "Andrew", age: 30},
      {id: "id_4", name: "Jackson", age: 26},
      {id: "id_5", name: "James", age: 20}
    ],
    showPersons: true,
  }
  style = {
    heading: {
      textAlign: "center",
      border: "1px solid gray",
      maxWidth: "400px",
      margin: "20px auto",
      padding: "20px"
    
    
    },
    paragraph: {
      textAlign: "center"
    },
    button: {
      cursor: "pointer",
      padding: "10px 20px"
    },
    list: {
      margin: "auto",
      maxWidth: "300px"
    }
  };

  buttonClickHandler = () => {
    this.setState({showPersons: !this.state.showPersons});
  }
  deleteHandler = (id) => {
    const index = this.state.persons.findIndex(p => {
      return p.id === id;
    });
    const newPersons = [...this.state.persons];
    // const newPersons = this.state.persons.slice();
    newPersons.splice(index, 1);
    this.setState({persons: newPersons});
  }
  render(){
    return (
      <div>
        <h1 style={this.style.heading}>List of All Persons</h1>
        <p style={this.style.paragraph}>
          <button style={this.style.button} onClick={this.buttonClickHandler}>{this.state.showPersons? 'Hide List' : 'Show List'}</button>
        </p>
        <hr/>
        {this.state.showPersons?
          <div style={this.style.list}>
            {
              this.state.persons.map(p => (
                <ErrorBoundary key={p.id}>
                  <Person name={p.name} deleteHandler={this.deleteHandler} id={p.id}/>
                </ErrorBoundary>
              ))
            }
          </div>
          :null
        }
        
      </div>
    );
  }
}
export default App;

/* Note:
Errors:
1. error messages (Errors generated by ReactJS)
2. Logical Errors
    i.   Chrome Developer Tool
    ii.  React Developer Tools (Chrome Extension)
    iii. Handle Errors Using ReactJS
          (React 16 introduces a new concept of an “error boundary”.)
*/